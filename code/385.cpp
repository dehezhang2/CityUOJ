#include <stdio.h>
#include <string.h>
#include <math.h>
#include <algorithm>
#include <stack>
using namespace std;
#define MAX 105

int n, cnt = 0;
struct Point {
    int x, y;
} pts[MAX];

double calcArea(const Point& p1, const Point& p2) {
    return 0.5 * (double)(p1.x * p2.y - p2.x * p1.y);
}

int clock(const Point& p1, const Point& p2, const Point& p3) {
    int val = (p2.x - p1.x) * (p3.y - p2.y) - (p2.y - p1.y) * (p3.x - p2.x);
    return val ? (val < 0 ? -1 : 1) : 0;
}

bool cmp_slope(const Point& p1, const Point& p2) {
    int val = clock(pts[0], p1, p2);
    return val ? val > 0 : p1.x < p2.x; 
}

int main() {
#ifdef DEBUG
    freopen("input.txt", "r", stdin);
#endif
    while(~scanf("%d\n", &n)&& n) {

        double tot_area = 0.0, box_area = 0.0;

        for(int i = 0; i < n; i++) {
            scanf("%d %d\n", &pts[i].x, &pts[i].y);
            if(i) tot_area += calcArea(pts[i-1], pts[i]);
        }
        tot_area += calcArea(pts[n-1], pts[0]);
        for(int i=1;i<n;i++){
            if(pts[i].y < pts[0].y || (pts[i].y == pts[0].y && pts[i].x < pts[0].x) )
                swap(pts[0], pts[i]);
        }
        sort(pts + 1, pts + n, cmp_slope);

        int top = 1;
        for(int i=2;i<n;i++){
            while(top > 0 && clock(pts[top-1],pts[top],pts[i])<=0)top--;
            pts[++top] = pts[i];
        }
        pts[++top] = pts[0];
        
        // move the collinear generated by graham scan
        int now = 1;
        for(int i=2;i<=top;i++){
            if(!clock(pts[now-1], pts[now], pts[i]))pts[now] = pts[i];
            else pts[++now] = pts[i];
        }
        for(int i=0;i<now;i++){
            box_area += calcArea(pts[i], pts[i+1]);
        }
        printf("Tile #%d\nWasted Space = %.2lf %%\n\n", ++cnt, 1e2*(1.0-tot_area/box_area));

    }
    return 0;
}